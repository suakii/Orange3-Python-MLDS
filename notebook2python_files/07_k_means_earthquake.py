# -*- coding: utf-8 -*-
"""k_means_earthquake_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B1sDlaBvmSZ7zsMlZ-DA0xqY_UIZ3haF

##**[1] 데이터 불러오기**

1.1 파일 업로드하기
"""

from google.colab import files
uploaded = files.upload()

"""1.2 데이터프레임 생성하기"""

import pandas as pd
df = pd.read_csv('/content/database.csv')

df.head()

"""## **[2] 탐색적 데이터 분석 및 전처리하기**

2.1 전체적인 데이터 살펴보기
"""

df.shape

df.info()

"""2.2 결측치 확인하기"""

df.isnull()

df.isnull().sum()

"""2.3 Type 속성 확인하기"""

df['Type'].value_counts()

import matplotlib.pyplot as plt
df['Type'].value_counts().plot(kind='bar')
plt.show()

"""2.4 지도 데이터 시각화하기"""

import folium
m = folium.Map(location=(0, 0), zoom_start=2)
m

for i in range(len(df)):
    folium.Circle(
        location=[df.iloc[i]['Latitude'], df.iloc[i]['Longitude']],
        radius=10,
    ).add_to(m)
m

"""## **[3] 모델 생성하기**

3.1 k-평균 알고리즘으로 데이터 학습하기
"""

earthquake = (df.Type=="Earthquake")
X = df.loc[earthquake, ['Depth', 'Magnitude', 'Latitude', 'Longitude']]
print(X)

from sklearn.cluster import KMeans
km = KMeans(n_clusters=3,  random_state=42)
y_km = km.fit_predict(X[['Depth', 'Magnitude']])
print(y_km[:10])

"""3.2 k-평균 군집화 결과 시각화하기"""

plt.scatter(X[y_km==0]['Depth'], X[y_km==0]['Magnitude'], color="green")
plt.scatter(X[y_km==1]['Depth'], X[y_km==1]['Magnitude'], color="orange")
plt.scatter(X[y_km==2]['Depth'], X[y_km==2]['Magnitude'], color="blue")
plt.xlabel('Depth')
plt.ylabel('Magnitude')

plt.show()

mm = folium.Map(location=(0, 0), zoom_start=2)
colors = ['red', 'blue', 'green']

for i in range(3):
    latitudeT =  X[y_km==i]['Latitude']
    longitudeT = X[y_km==i]['Longitude']

    for latitude, longitude in zip(latitudeT, longitudeT) :
        folium.Circle(
            location=[latitude, longitude],
            radius=10,
            color = colors[i]
        ).add_to(mm)

mm

"""## **[4] 모델 평가하기**"""

from sklearn.metrics import silhouette_score

scores = []

for i in range(2, 8):
    km = KMeans(n_clusters=i, random_state=42)
    km.fit(X[['Depth', 'Magnitude']])
    score = silhouette_score(X[['Depth', 'Magnitude']], km.labels_)
    scores.append(score)

plt.plot(range(2, 8), scores, marker='o')
plt.xlabel('Number of clusters')
plt.show()